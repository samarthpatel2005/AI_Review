name: AI Code Review

on:
  pull_request:
    types: [opened, synchronize, reopened]
    branches: [ main, master, develop ]

env:
  AWS_DEFAULT_REGION: us-east-1

jobs:
  ai-code-review:
    runs-on: ubuntu-latest
    permissions:
      pull-requests: write
      contents: read
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install boto3 requests python-dotenv

    - name: Create AI reviewer script
      run: |
        cat > ai_reviewer.py << 'EOF'
        #!/usr/bin/env python3
        import json
        import os
        import sys
        import requests
        import boto3
        from datetime import datetime

        class GitHubActionReviewer:
            def __init__(self):
                self.github_token = os.environ.get('GITHUB_TOKEN')
                self.aws_access_key = os.environ.get('AWS_ACCESS_KEY_ID')
                self.aws_secret_key = os.environ.get('AWS_SECRET_ACCESS_KEY')
                self.region = os.environ.get('AWS_DEFAULT_REGION', 'us-east-1')
                self.model_id = os.environ.get('BEDROCK_MODEL_ID', 'amazon.nova-micro-v1:0')
                
                if not all([self.github_token, self.aws_access_key, self.aws_secret_key]):
                    print("‚ùå Missing required environment variables!")
                    sys.exit(1)
                
                # Initialize Bedrock client
                self.bedrock = boto3.client(
                    'bedrock-runtime',
                    region_name=self.region,
                    aws_access_key_id=self.aws_access_key,
                    aws_secret_access_key=self.aws_secret_key
                )
                
                self.headers = {
                    'Authorization': f'token {self.github_token}',
                    'Accept': 'application/vnd.github.v3+json',
                    'User-Agent': 'AI-Code-Reviewer'
                }

            def get_pr_diff(self, repo, pr_number):
                """Get PR diff from GitHub API"""
                url = f"https://api.github.com/repos/{repo}/pulls/{pr_number}"
                headers = dict(self.headers)
                headers['Accept'] = 'application/vnd.github.v3.diff'
                
                response = requests.get(url, headers=headers)
                response.raise_for_status()
                return response.text

            def filter_code_diff(self, diff_content):
                """Filter diff to include only code files"""
                code_extensions = {'.py', '.js', '.ts', '.java', '.c', '.cpp', '.h', '.go', '.rs', '.php', '.rb', '.swift', '.kt'}
                
                lines = diff_content.split('\n')
                filtered_lines = []
                include_section = False
                
                for line in lines:
                    if line.startswith('diff --git'):
                        parts = line.split(' ')
                        if len(parts) >= 4:
                            filename = parts[3]
                            if any(filename.endswith(ext) for ext in code_extensions):
                                include_section = True
                                filtered_lines.append(line)
                            else:
                                include_section = False
                    elif include_section:
                        filtered_lines.append(line)
                
                return '\n'.join(filtered_lines)

            def create_review_prompt(self, diff_content, pr_info):
                """Create AI review prompt"""
                prompt = f"""Review this GitHub Pull Request diff:

        **PR #{pr_info['number']}: {pr_info['title']}**
        Author: {pr_info['user']['login']}
        Files changed: {pr_info['changed_files']}
        Additions: +{pr_info['additions']}, Deletions: -{pr_info['deletions']}

        DIFF:
        ```diff
        {diff_content[:20000]}  # Limit to 20KB
        ```

        Provide a code review focusing on:
        1. **Security vulnerabilities** in changed code
        2. **Logic errors** and potential bugs  
        3. **Code quality** and best practices
        4. **Performance** considerations
        5. **Maintainability** issues

        Format your response as:
        ## üîç AI Code Review

        ### Summary
        [Brief overall assessment]

        ### Issues Found
        [List specific issues with line references]

        ### Recommendations
        [Specific suggestions for improvement]

        ### Overall Rating
        ‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê (Rate 1-5 stars)

        Keep the review constructive and focus only on the changed lines."""
                
                return prompt

            def get_ai_review(self, prompt):
                """Get AI review from AWS Bedrock"""
                body = {
                    "messages": [
                        {
                            "role": "user", 
                            "content": [{"text": prompt}]
                        }
                    ],
                    "inferenceConfig": {
                        "maxTokens": 3000,
                        "temperature": 0.1,
                        "topP": 0.8
                    }
                }
                
                response = self.bedrock.invoke_model(
                    modelId=self.model_id,
                    body=json.dumps(body),
                    contentType="application/json",
                    accept="application/json"
                )
                
                result = json.loads(response['body'].read())
                return result['output']['message']['content'][0]['text']

            def post_review_comment(self, repo, pr_number, review_text):
                """Post AI review as PR comment"""
                url = f"https://api.github.com/repos/{repo}/issues/{pr_number}/comments"
                
                comment_body = f"""## ü§ñ AI Code Review Report
        
        {review_text}
        
        ---
        *This review was generated automatically by AI. Please use your judgment and consider this as one perspective among many.*
        
        **Powered by AWS Bedrock** ‚ö°"""
                
                data = {"body": comment_body}
                
                response = requests.post(url, headers=self.headers, json=data)
                response.raise_for_status()
                return response.json()

            def review_pr(self, repo, pr_number):
                """Main review function"""
                print(f"üîç Reviewing PR #{pr_number} in {repo}")
                
                # Get PR info
                pr_url = f"https://api.github.com/repos/{repo}/pulls/{pr_number}"
                pr_response = requests.get(pr_url, headers=self.headers)
                pr_response.raise_for_status()
                pr_info = pr_response.json()
                
                # Get diff
                diff_content = self.get_pr_diff(repo, pr_number)
                code_diff = self.filter_code_diff(diff_content)
                
                if not code_diff.strip():
                    print("‚ÑπÔ∏è No code files to review")
                    return
                
                # Generate AI review
                prompt = self.create_review_prompt(code_diff, pr_info)
                review_text = self.get_ai_review(prompt)
                
                # Post comment
                self.post_review_comment(repo, pr_number, review_text)
                print("‚úÖ AI review posted successfully!")

        if __name__ == "__main__":
            reviewer = GitHubActionReviewer()
            
            # Get event data from GitHub
            event_path = os.environ.get('GITHUB_EVENT_PATH')
            if event_path and os.path.exists(event_path):
                with open(event_path, 'r') as f:
                    event_data = json.load(f)
                
                repo = event_data['repository']['full_name']
                pr_number = event_data['pull_request']['number']
                
                reviewer.review_pr(repo, pr_number)
            else:
                print("‚ùå No GitHub event data found")
                sys.exit(1)
        EOF

    - name: Run AI Code Review
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        BEDROCK_MODEL_ID: amazon.nova-micro-v1:0
      run: |
        python ai_reviewer.py